\ProvidesPackage{mymacros}

% ============================== ACRONYMS ==============================
\usepackage[acronym,nomain]{glossaries}
  \setacronymstyle{long-short}
  \newacronym{fem}{FEM}{finite element method}
  \newacronym[shortplural={DoFs},longplural={degrees-of-freedom}]
    {dof}{DoF}{degree-of-freedom}
  \newacronym{pde}{PDE}{partial differential equation}
  % \newacronym[shortplural={FLOPs},longplural={floating-point operations}]
  %   {flop}{FLOP}{floating-point operation}
  \newacronym{dag}{DAG}{directed acyclic graph}
  % \newacronym{dg}{DG}{discontinous Galerkin}
  % \newacronym{poset}{poset}{partially-ordered set}
  % \newacronym{rcm}{RCM}{reverse Cuthill-McKee}
  \newacronym{dsl}{DSL}{domain-specific language}
  % \newacronym{jit}{JIT}{just-in-time}
  % \newacronym{ufl}{UFL}{the Unified Form Language}
  % \newacronym{tsfc}{TSFC}{the Two-Stage Form Compiler}


% ============================== MATHS ==============================

% DMPlex
% source: https://tex.stackexchange.com/questions/650034/mathbb-font-for-lowercase-letters
\usepackage[bb=libus]{mathalpha}

\newcommand{\closure}{\mathbb{cl}}
\newcommand{\support}{\mathbb{supp}}
\newcommand{\plexstar}{\mathbb{st}}
\newcommand{\cone}{\mathbb{cone}}

% FEM
\newcommand{\hdiv}{$H(\mathrm{div})$ }
\newcommand{\hcurl}{$H(\mathrm{curl})$ }

% ============================== SOFTWARE ==============================

% hacky way to get \pyop2 and \pyop3 as valid macros
% source: https://tex.stackexchange.com/questions/13290/how-to-define-macros-with-numbers-in-them
\def\pyop#1{\ifnum#1=2 {PyOP2}\else \ifnum#1=3 {\texttt{pyop3}}\fi \fi}

\newcommand{\pycode}{\mintinline[escapeinside=??]{python}}
\newcommand{\ccode}{\mintinline{c}}

\newcommand{\pycodemini}{\mintinline[fontsize=\footnotesize]{python}}

% nicer maths arrays
\newcommand{\lbrac}{\pmb{\bigl[}}
\newcommand{\rbrac}{\pmb{\bigr]}}

% ============================== TABLES ==============================

% more control of table appearance
% https://tex.stackexchange.com/questions/10243/tabular-border-style
\usepackage{tabularray}

% NOTE: This doesn't appear to work, but still looks fine...
% https://tex.stackexchange.com/questions/33486/aligning-inside-tabular-environment-specific-cell
\newcommand{\tableDash}{\SetCell{c}\pycode{-}}

% checkbox
% source https://tex.stackexchange.com/questions/16000/creating-boxed-check-mark
\usepackage{amssymb}
\newcommand{\unchecked}{\makebox[0pt][l]{$\square$}\raisebox{.15ex}{\hspace{0.1em}$\quad$}}
\newcommand{\checked}{\makebox[0pt][l]{$\square$}\raisebox{.15ex}{\hspace{0.1em}$\checkmark$}}
\newcommand{\maybe}{\makebox[0pt][l]{$\square$}\raisebox{.15ex}{\hspace{0.1em}?}}

% ============================== FIGURES ==============================

% rotate figures on a page
\usepackage{rotating}
% https://tex.stackexchange.com/questions/337/how-to-change-certain-pages-into-landscape-portrait-mode
% \usepackage{pdflscape}

% ============================== EXAMPLES ==============================

% https://tex.stackexchange.com/questions/21227/example-environment
\usepackage{amsthm}
\theoremstyle{definition}
\newtheorem{example}{Example}[chapter]

% ============================== CODE LISTINGS ==============================

\usepackage{algorithm}
\usepackage{minted}
  % center code listings
  % https://tex.stackexchange.com/questions/161124/how-to-make-a-minted-code-listing-centered-on-a-page
  \usepackage{xpatch,letltxmacro}
  \LetLtxMacro{\cminted}{\minted}
  \let\endcminted\endminted
  \xpretocmd{\cminted}{\RecustomVerbatimEnvironment{Verbatim}{BVerbatim}{}}{}{}

  % settings for all minted environments
  % https://tex.stackexchange.com/questions/25190/defining-a-command-for-a-minted-environment
  \newminted[pyalg]{python}{fontsize=\footnotesize,bgcolor=gray!20,autogobble,linenos}
  % \newenvironment{env}{\VerbatimEnvironment\begin{pyalg}}{\end{pyalg}}

  % this is the same but in principle I think actual code vs algorithms could be different
  \newminted[pylisting]{python}{fontsize=\footnotesize,bgcolor=gray!20,autogobble,linenos}
  % \newenvironment{env}{\VerbatimEnvironment\begin{pylisting}}{\end{pylisting}}

  \newminted[clisting]{c}{fontsize=\footnotesize,bgcolor=gray!20,autogobble,linenos}

  \newminted[pyalg2]{python}{autogobble,linenos,escapeinside=??,highlightcolor=red!30}
  \newminted[mypyinline]{python}{autogobble,escapeinside=??,highlightcolor=red!30}
  \newminted[mycinline]{c}{autogobble,escapeinside=??,highlightcolor=red!30}

% custom environments
% https://www.overleaf.com/learn/latex/Environments
% NOTE: Must include \VerbatimEnvironment for this to work (see pg. 29 minted docs)
\newenvironment
  {pyinline}
  {\VerbatimEnvironment \begin{center} \begin{minipage}{.8\textwidth} \begin{mypyinline}}
  {\end{mypyinline} \end{minipage} \end{center}}

\newenvironment
  {cinline}
  {\VerbatimEnvironment \begin{center} \begin{minipage}{.8\textwidth} \begin{mycinline}}
  {\end{mycinline} \end{minipage} \end{center}}

\newenvironment
  {cinlinesmall}
  {\VerbatimEnvironment \begin{center} \begin{mycinline*}{fontsize=\footnotesize}}
  {\end{mycinline*} \end{center}}
